import matplotlib.pyplot as plt
from qiskit import QuantumCircuit, transpile, Aer
import numpy as np

def cirquit(quant_circuit, nqubits, phi):
    for qubit in range(nqubits):
       quant_circuit.ry(np.pi/2,qubit)
       #quant_circuit.barrier()
       # Encoder, n_en = 0
       quant_circuit.ry(np.pi/2,qubit)
       #quant_circuit.barrier()
       #  Evolution of the phase in the atomic state
       quant_circuit.rz(phi,qubit)
       #quant_circuit.barrier()
       # Decoder, n_dec = 0
       quant_circuit.rx(np.pi/2,qubit)
       #quant_circuit.barrier()
       # Measurement
       quant_circuit.measure(qubit, qubit) # Measuring qubit
    return quant_circuit


def average_Jz(params, num_qubits, num_shots, delta_phi, nEn, nDe):
    phi = params[0]

    qc = QuantumCircuit(num_qubits, num_qubits)

    # Apply the modified circuit definition
    cirquit(qc, num_qubits, phi)

    simulator = Aer.get_backend('qasm_simulator')
    job = simulator.run(transpile(qc, simulator), shots=num_shots)
    result = job.result()

    counts = result.get_counts(qc)

    # average Jz
    Jz = 0
    for state, count in counts.items():
        Jz += count * (-1) ** sum([int(bit) for bit in state])
    Jz /= num_shots

    # Normalize Jz
    Jz_normalized = Jz / (num_qubits / 2)

    return Jz_normalized


num_qubits = 16
num_shots = 1000
delta_phi = 0.7
phi_value = np.pi / 4
nEn = 0
nDe = 0

phi_values = np.linspace(-np.pi, np.pi, 100)

depths = [(0,0)]

average_Jz_values = []

for nEn, nDe in depths:
    print(f"Circuit for nEn={nEn}, nDe={nDe}:")
    qc = QuantumCircuit(num_qubits, num_qubits)

    # Apply the modified circuit definition
    cirquit(qc, num_qubits, phi_value)

    qc.draw('mpl')
    plt.show()

    average_Jz_values.append([average_Jz([phi], num_qubits, num_shots, delta_phi, nEn, nDe) for phi in phi_values])

# Plot the results
plt.figure(figsize=(10, 5))
for i, (nEn, nDe) in enumerate(depths):
    plt.plot(phi_values, average_Jz_values[i], label=f'nEn={nEn}, nDe={nDe}')
plt.xlabel('Phase φ of evolution pulse (rad)')
plt.ylabel('<Jz>/ℏ')
plt.show()
